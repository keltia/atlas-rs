//! Struct and methods to deal with probes
//!

/// External crates
use anyhow::anyhow;
use serde::{Deserialize, Serialize};
use reqwest::{Error, StatusCode};

/// Our crates
use crate::client::Client;
use crate::common::add_opts;
use crate::errors::*;

/// Geolocation as reported by the probe
#[derive(Serialize, Deserialize, Debug)]
pub struct Geometry {
    #[serde(rename = "type")]
    pub gtype: String,
    /// GPS coordinates
    pub coordinates: Vec<f64>,
}

/// Describes the current status of the probe
#[derive(Serialize, Deserialize, Debug)]
pub struct Status {
    /// Date
    pub since: String,
    /// Probe ID
    pub id: u32,
    /// Status: connected, etc.
    pub name: String,
}

/// Tags about the probe, most generated by the API, some you can add
#[derive(Serialize, Deserialize, Debug)]
pub struct Tags {
    pub name: String,
    pub slug: String,
}

/// All information about a given probe
#[derive(Serialize, Deserialize, Debug)]
pub struct Probe {
    /// IPv4 address
    pub address_v4: String,
    /// IPv6 address
    pub address_v6: String,
    /// IPv4 Autonomous System ID
    pub asn_v4: u32,
    /// IPv6 Autonomous System ID
    pub asn_v6: u32,
    /// ISO 3166 Country Code
    pub country_code: String,
    /// Free text description
    pub description: String,
    /// Approx Position
    pub geometry: Geometry,
    /// Probe ID
    pub id: u32,
    /// Is it an Anchor?
    pub is_anchor: bool,
    /// Is it public?
    pub is_public: bool,
    /// POSIX time since last connect
    pub last_connected: u32,
    /// IPv4 Network Prefix
    pub prefix_v4: String,
    /// IPv6 Network Prefix
    pub prefix_v6: String,
    /// Probe Status
    pub status: Status,
    /// ASCII time
    pub status_since: String,
    /// System and User tags
    pub tags: Vec<Tags>,
    /// Probe Type
    #[serde(rename = "type")]
    pub ptype: String,
}

/// When asking for a list of probes, this struct is used for pagination
#[derive(Serialize, Deserialize, Debug)]
pub struct ProbeList {
    /// How many results in this block
    pub count: u32,
    /// URL to fetch the next block
    pub next: String,
    /// URL to fetch previous block
    pub previous: String,
    /// Current Probe Block
    pub probes: Vec<Probe>,
}

/// Main API methods for `Probe` type
impl<'cl> Client<'cl> {
    /// Get information on a specific probe by ID
    ///
    /// Examples:
    ///
    /// ```no_run
    ///  # use atlas_rs::client::Client;
    ///  # use atlas_rs::probes::Probe;
    ///
    ///     let cl = Client::new("foo").verbose(true);
    ///     let pi = cl.get_probe(666).unwrap();
    ///
    ///     println!("Probe ID {}: {}", 666, pi.description);
    ///  ```
    ///
    pub fn get_probe(&self, id: u32) -> Result<Probe, APIError> {
        let url = format!("{}/probe/{}", self.endpoint, id);

        let mut opts = self.opts.clone();
        opts.insert("key", self.api_key);

        let url = add_opts(&url, opts);

        let resp = self.agent.as_ref().unwrap().get(&url).send();

        let resp = match resp {
            Ok(resp) => resp,
            Err(e) => {
                let aerr = APIError::new(e.status().unwrap().as_u16(),
                                        "Bad",
                                        "unknown error",
                                        "get_probe");
                return Err(aerr)
            }
        };

        // Try to see if we got an error
        match resp.status().as_u16() {
            200 => {
                let p: Probe = resp.json()?;
                Ok(p)
            },
            p => {
                let aerr = decode_as_error(resp)?;
                Err(aerr)
            }
        }
    }

    /// Get information about a set of probes according to parameters
    ///
    pub fn get_probes() -> Result<ProbeList, APIError> {
        unimplemented!()
    }
}

#[cfg(test)]
mod tests {
    #[test]
    fn test_get_probe() {}
}
