//! Structs and methods to deal with credits
//!

//  This has the following call-tree
//
//           ----- /credits                ----- /get
//                                         ----- /get  ----- /incomes
//                                                           /expenses
//                                                           /transfers
//                                                           /transactions
//                                                           /members
//                                                           /members      ----- /claim
//

// -------------------------------------------------------------------------
// Standard library
use std::fmt;
use std::fmt::Formatter;

// Our crates
use crate::client::Client;
use crate::common::add_opts;
use crate::errors::*;
use crate::request::{Param, RequestBuilder};

// -------------------------------------------------------------------------

/// All operations available
#[derive(Debug)]
enum Ops {
    Get = 1,
    Incomes,
    Expenses,
    Transfers,
    Transactions,
    Members,
    Claim,
}

/// Generate the proper URL for the service we want in the given category
fn set_url(ops: Ops) -> String {
    match ops {
        Ops::Get => "/credits/".to_string(),                 // /get
        Ops::Incomes => "/credits/incomes/".to_string(),     // /set
        Ops::Expenses => "/credits/expenses/".to_string(),   // /delete
        Ops::Transfers => "/credits/transfers/".to_string(), // /list
        Ops::Transactions => "/credits/transactions/".to_string(), // /list
        Ops::Members => "/credits/members/".to_string(),     // /create
        Ops::Claim => "/credits/members/claim/".to_string(), // /create
    }
}

// -------------------------------------------------------------------------

/// This is the structure describing credits
///
#[derive(Serialize, Deserialize, Debug)]
pub struct Credits<'cr> {
    /// Current number of available credits
    pub current_balance: u32,
    /// Do we perform a credit check before creating the measurement
    pub credit_checked: bool,
    /// Maximum number of credits that can be spend in a day
    pub max_daily_credits: u32,
    /// Total estimated daily income from all income items
    pub estimated_daily_income: u32,
    /// Total estimated daily expenditure from all expense items
    pub estimated_daily_expenditure: u32,
    /// Estimated daily income minus estimated daily expenditure
    pub estimated_daily_balance: u32,
    /// Time that the estimates were produced
    pub calculation_time: &'cr str,
    /// Estimated elapsed time from `calculation_time` until total credit balance will drop to zero
    pub estimated_runout_seconds: u32,
    /// Number of results from user-defined measurements in the past 24 hours
    pub past_day_measurement_results: u32,
    /// Number of credits spent in the past 24 hours
    pub past_day_credits_spent: u32,
    /// Last time the account was debited
    pub last_date_debited: &'cr str,
    /// Last time the account was credited
    pub last_date_credited: &'cr str,
    /// URL of the income-items list
    pub income_items: &'cr str,
    /// URL of the expense-items list
    pub expense_items: &'cr str,
    /// URL of the transactions list
    pub transactions: &'cr str,
}

impl Credits {
    pub fn dispatch<'cr>(
        mut r: RequestBuilder<'cr>,
        ops: Ops,
        data: Param<'cr>,
    ) -> RequestBuilder<'cr> {
        let opts = r.c.opts.clone();
        let add = set_url(ops, data.into());

        let url = reqwest::Url::parse_with_params(
            format!("{}/{}", r.r.url().as_str(), add).as_str(),
            opts.iter(),
        )
            .unwrap();
        r.r = reqwest::blocking::Request::new(r.r.method().clone(), url);
        r
    }
}

/// Show eligibility for claiming bonus credits for associated RIPE NCC
pub struct ClaimRequests {
    /// Array of RegIDs to claim credits for
    pub members: Vec<Member>,
}

/// struct for income generated by a probe
///
pub struct ProbeIncome<'cr> {
    /// ID of the probe,
    pub probe_id: u32,
    /// URL of the probe in the probes API,
    pub probe: &'cr str,
    /// Description of this income item,
    pub description: &'cr str,
    /// Credits that would be earned from this probe being connected for a full day,
    pub max_daily_connected_income: u32,
    ///Estimated credits earned from this probe per day,
    pub estimated_daily_income: &'cr str,
}

/// Implement the Display trait.
///
impl fmt::Display for Credits {
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        write!(f, "{}", serde_json::to_string(self).unwrap())
    }
}
